import Foundation

// MARK: - Structs pour le mod√®le de donn√©es (en provenance du JSON)

struct ItemData: Decodable {
    var name: String
    var description: String
    var isTakable: Bool
}

struct CharacterData: Decodable {
    var name: String
    var description: String
    var dialogue: [String]
}

struct Coordinates: Decodable {
    var x: Int
    var y: Int
    
    init(from dictionary: [String: Int]) {
        self.x = dictionary["x"] ?? 0
        self.y = dictionary["y"] ?? 0
    }
}

struct RoomData: Decodable {
    var name: String
    var description: String
    var items: [ItemData]
    var characters: [CharacterData]
    var puzzles: [PuzzleData]
    var exits: [String: String]
    var requiredItems: [String]? // les ID d'objets requis
    var entryPuzzleId: String? // ID de l‚Äô√©nigme √† r√©soudre pour entrer
    var coordinates: Coordinates

    enum CodingKeys: String, CodingKey {
        case name
        case description
        case items
        case characters
        case puzzles
        case exits
        case requiredItems
        case entryPuzzleId
        case coordinates
    }
}

// Structure pour un puzzle
struct PuzzleData: Decodable {
    var id: String
    var question: String
    var correctAnswer: String
    var solved: Bool?  // Rendre "solved" optionnel
}




struct GameData: Decodable {
    var rooms: [RoomData]
    var inventory: [ItemData]?
    var solvedPuzzles: [String] 
}

struct SaveData: Codable {
    var name: String
    var score: Int
    //let solvedPuzzles: Int
    //let exploredRooms: Int
    //let inventory: [String]
    var visitedRooms: [String]
}


 
// MARK: - Chargement des donn√©es depuis le fichier JSON
func savePlayerInfoToFile(player: Player) {
    let saveData = SaveData(
        name: player.name,
        score: player.score,
        visitedRooms: Array(player.visitedRooms)
    )

    let fileURL = URL(fileURLWithPath: "/home/celine/jeu-aventure/save.json")

    var existingData: [SaveData] = []

    // Lire les donn√©es existantes
    if FileManager.default.fileExists(atPath: fileURL.path) {
        do {
            let data = try Data(contentsOf: fileURL)
            let decoder = JSONDecoder()
            existingData = try decoder.decode([SaveData].self, from: data)
        } catch {
            print("‚ö†Ô∏è Erreur lors du chargement des donn√©es existantes : \(error)")
        }
    }

    // V√©rifier si le joueur existe d√©j√†
    if let index = existingData.firstIndex(where: { $0.name == player.name }) {
        // Si le joueur existe, mettre √† jour ses donn√©es
        existingData[index].score = player.score
        existingData[index].visitedRooms = Array(player.visitedRooms)
        print("üíæ Les informations du joueur \(player.name) ont √©t√© mises √† jour.")
    } else {
        // Si le joueur n'existe pas, ajouter un nouveau joueur
        existingData.append(saveData)
        print("üíæ Nouveau joueur ajout√© : \(player.name)")
    }

    // Sauvegarder toutes les donn√©es
    do {
        let encoder = JSONEncoder()
        encoder.outputFormatting = .prettyPrinted
        let jsonData = try encoder.encode(existingData)
        try jsonData.write(to: fileURL)
        print("üíæ Les informations du joueur ont √©t√© sauvegard√©es dans save.json")
    } catch {
        print("‚ùå Erreur lors de la sauvegarde : \(error)")
    }
}



func loadGameData() -> ([Room], [String: Puzzle])? {
    // Sp√©cifie le chemin du fichier JSON contenant les donn√©es du jeu
    let fileURL = URL(fileURLWithPath: "game.json")
    // V√©rifie si le fichier existe
    guard FileManager.default.fileExists(atPath: fileURL.path) else {
        print("Fichier JSON non trouv√©.")
        return nil
    }

    do {
        let data = try Data(contentsOf: fileURL)// Charge les donn√©es brutes depuis le fichier
        let decoder = JSONDecoder()// Initialise un d√©codeur JSON
        let gameData = try decoder.decode(GameData.self, from: data)// D√©code les donn√©es en une structure GameData

        var rooms: [String: Room] = [:] // Dictionnaire temporaire pour les salles
        var allPuzzles: [Puzzle] = []  // Liste pour toutes les √©nigmes

        // Parcourt chaque salle d√©crite dans le JSON
        for roomData in gameData.rooms {
            // Convertit les objets JSON en instances d'Item
            let items = roomData.items.map {
                Item(name: $0.name, description: $0.description, isTakable: $0.isTakable)
            }
            // Convertit les √©nigmes JSON en instances de Puzzle
            let puzzles = roomData.puzzles.map {
                Puzzle(id: $0.id, question: $0.question, correctAnswer: $0.correctAnswer)
            }
            // Ajoute ces √©nigmes √† la liste globale
            allPuzzles.append(contentsOf: puzzles)
            // Convertit les personnages JSON en instances de Character
            let characters = roomData.characters.map {
                Character(name: $0.name, description: $0.description, dialogue: $0.dialogue )
            }
            // Cr√©e un objet Room avec tous les √©l√©ments
            let room = Room(
                name: roomData.name,
                description: roomData.description,
                items: items,
                characters: characters,
                puzzles: puzzles,
                exits: roomData.exits,
                requiredItems: roomData.requiredItems,
                entryPuzzleId: roomData.entryPuzzleId,
                coordinates: roomData.coordinates
            )
            // Ajoute la salle au dictionnaire des salles
            rooms[roomData.name] = room
        }

        // Cr√©ation du dictionnaire des √©nigmes par ID
        let puzzlesById = allPuzzles.reduce(into: [:]) { $0[$1.id] = $1 }
         // Retourne toutes les salles sous forme de tableau + dictionnaire des √©nigmes
        return (Array(rooms.values), puzzlesById)


    } catch {
        // Affiche une erreur si le d√©codage √©choue
        print("Erreur lors du chargement du JSON : \(error)")
        return nil
    }
}

// MARK: - Introduction et r√®gles

 

// Fonction pour afficher l'introduction avec bordure et couleur
func printIntroduction() {
    let couleurBleue = "\u{001B}[34m"
    let couleurRouge = "\u{001B}[31m"
    let reset = "\u{001B}[0m"
    
    let bordure = "\n\n##################################################"
    
    print("\(bordure)")
    print("\(couleurBleue)\n\nBienvenue dans l'aventure !\(reset)\n")
    print("Vous √™tes un aventurier courageux qui explore un ancien temple rempli de myst√®res.")
    print("Votre mission est de r√©soudre les √©nigmes, trouver des objets pr√©cieux et d√©couvrir les secrets du temple.")
    print("Mais attention, il faut √™tre prudent et rapide car le temps passe vite !\n")
    print("\(couleurRouge)Pr√©parez-vous √† une aventure √©pique.\(reset)\n")
    print("Appuyez sur 'Enter' pour commencer.")
    print("\(bordure)")
}

// Fonction pour afficher les r√®gles avec bordure et couleur
func printRules() {
    let bleu = "\u{001B}[34m"
    let vert = "\u{001B}[32m"
    let reset = "\u{001B}[0m"
    
    let bordure = String(repeating: "#", count: 70)
    
    print("\n\(bordure)")
    print("#\(String(repeating: " ", count: 68))#")
    print("#\(String(repeating: " ", count: 25))\(vert)üìú R√àGLES DU JEU\(reset)\(String(repeating: " ", count: 26))#")
    print("#\(String(repeating: " ", count: 68))#")
    print("\(bordure)\n")
    
    print("\(bleu)- Vous vous d√©placez dans diff√©rentes salles avec : 'go [direction]'")
    print("- Pour observer votre environnement : 'look'")
    print("- Pour prendre un objet : 'take [objet]'")
    print("- Pour voir votre inventaire : 'inventory'")
    print("- Pour utiliser un objet : 'use [objet]'")
    print("- Pour voir votre position : 'showmap'")
    print("- Pour afficher l'aide : 'help'")
    print("- Pour quitter le jeu : 'quit'\(reset)\n")
    
    print("\(bordure)\n")
}


 
// MARK: - Fonctions de gestion du jeu
func startGame(rooms: [String: Room], startingRoomName: String, puzzlesById: [String: Puzzle]) {
    let couleurRouge = "\u{001B}[31m"
    let reset = "\u{001B}[0m"

    // V√©rifie que la salle de d√©part existe dans le dictionnaire des salles.
// Si elle n'existe pas, affiche une erreur et termine l'ex√©cution du programme.
    guard var currentRoom = rooms[startingRoomName] else {
    print("Erreur : la salle de d√©part '\(startingRoomName)' est introuvable.")
    exit(1)
}

    var inventory: [Item] = []
    // D√©finir une map (exemple 3x3, √† adapter √† ton jeu)
let map: [[String]] = [
    ["Salle9", "Salle2", "Salle3"],
    ["Salle8", "Salle1", "Salle4"],
    ["Salle7", "Salle6", "Salle5"]
]


 

// Trouver la position initiale du joueur dans la map
var playerX = 0
var playerY = 0
// Parcourt chaque ligne du tableau `map` avec son index `y`
for (y, row) in map.enumerated() {
    // Parcourt chaque √©l√©ment (nom de salle) de la ligne avec son index `x`
    for (x, roomName) in row.enumerated() {
        // Si le nom de la salle correspond √† la salle de d√©part
        if roomName == startingRoomName {
            // Enregistre les coordonn√©es de d√©part du joueur
            playerX = x
            playerY = y
        }
    }
}
// Demander le nom du joueur
    let playerName = askPlayerName()


//let startingRoomName = "Salle1"  // Nom fixe de la salle de d√©part
// V√©rifie que la salle de d√©part existe dans le dictionnaire des salles.
// Si elle est introuvable, le programme s'arr√™te avec une erreur explicite.
guard let startingRoom = rooms[startingRoomName] else {
    fatalError("Salle de d√©part introuvable avec le nom \(startingRoomName)")
}

// Initialise le joueur avec son nom, la salle de d√©part et sa position sur la carte.
var player = Player(name: playerName, currentRoom: startingRoom, xPosition: playerX, yPosition: playerY)
// Fonction pour effacer un certain nombre de lignes pr√©c√©dentes dans la console (effet visuel)
func clearPreviousLines(_ count: Int) {
    for _ in 0..<count {
        // D√©place le curseur d'une ligne vers le haut et efface cette ligne
        print("\u{001B}[1A\u{001B}[2K", terminator: "")
    }
}


printIntroduction()
 _ = readLine() // Attente d'une touche pour commencer
printRules()

// Cr√©ation d‚Äôun minuteur de jeu avec une dur√©e de 300 secondes (5 minutes)
let timer = GameTimer(duration: 300,
                          onTick: { formattedTime in
        print("\u{001B}[s", terminator: "")
        print("\u{001B}[H", terminator: "")
        print("\u{001B}[2K", terminator: "")

         // Cr√©ation des cha√Ænes √† afficher : le temps restant et le score
        let timeString = "‚è≥ Temps restant : \(formattedTime)"
        let scoreString = "üèÖ Score : \(player.score)"
        let totalWidth = 80
        let padding = max(totalWidth - timeString.count - scoreString.count, 1)
        let spaces = String(repeating: " ", count: padding)

        print("\(timeString)\(spaces)\(scoreString)")
        print("\u{001B}[u", terminator: "")
        fflush(stdout)
    },

    // Callback appel√© lorsque le temps est √©coul√©
    onTimeUp: {
        // Si le joueur n‚Äôest pas dans la salle finale ("Salle9"), il perd
        if player.currentRoom.name != "Salle9" {
            print("\n‚åõ\(couleurRouge) Vous avez perdu ! le temps est √©coul√©. Fin de la partie.\(reset)")
            savePlayerInfoToFile(player: player)// Sauvegarde les infos du joueur
        } else {
             // Sinon, il a gagn√© √† temps
            print("\nüéâ\(couleurRouge) Vous avez gagn√© avant que le temps ne soit √©coul√© !\(reset)")
            savePlayerInfoToFile(player: player)
        }
        exit(0)// Termine le jeu
    })
    

    timer.start()

var firstLook = true


    while true {
        // V√©rifie si le temps est √©coul√© avant chaque action
        if timer.getTimeRemaining() <= 0 {
            print("\n‚åõ Le temps est √©coul√© ! Fin de la partie.")
            break
        }
       // clearConsole() // Effacer la console √† chaque tour

        if firstLook {
            handleLookCommand(currentRoom: currentRoom)
            firstLook = false
        }


        // V√©rifie si le joueur a trouv√© le tr√©sor dans son inventaire pour terminer l'aventure
        if inventory.contains(where: { $0.name.lowercased() == "tr√©sor" }) {
            print("\nüèÜ F√©licitations ! Vous avez trouv√© le tr√©sor et termin√© l'aventure !")
            savePlayerInfoToFile(player: player)
            break
        }

// V√©rifie s'il y a des puzzles non r√©solus dans la salle actuelle
 if !currentRoom.puzzles.isEmpty {
    for i in 0..<currentRoom.puzzles.count {
        let puzzle = currentRoom.puzzles[i]
        if !puzzle.solved {
            // Affiche le puzzle et indique qu'il y a un temps limite
            print("\nüß© Puzzle : \(puzzle.question)")
            print("‚è≥ Vous avez 30 secondes pour r√©pondre.")
            
            let group = DispatchGroup()
            let semaphore = DispatchSemaphore(value: 0)
            var userInput: String? = nil
            // Lance une t√¢che en parall√®le pour lire la r√©ponse de l'utilisateur
            group.enter()
            DispatchQueue.global().async {
                print("\nüí¨ Votre r√©ponse : ", terminator: "")
                userInput = readLine()?.trimmingCharacters(in: .whitespacesAndNewlines)
                semaphore.signal()
                group.leave()
            }

            // Attend la r√©ponse pendant un maximum de 30 secondes
            let result = semaphore.wait(timeout: .now() + 30)

            // G√®re les diff√©rents cas selon la r√©ponse ou le d√©passement de temps
            if result == .timedOut {
                print("\n‚è±Ô∏è Trop lent ! Vous perdez 10 points.")
                player.addPoints(-10)
            } else if let answer = userInput, !answer.isEmpty {
                if puzzle.checkAnswer(answer) {
                    // Bonne r√©ponse
                    puzzle.solved = true
                    currentRoom.puzzles[i] = puzzle
                    player.addPoints(5)
                    print("\n‚úÖ Vous avez r√©solu le puzzle ! (+5 points)")
                } else {
                    // Mauvaise r√©ponse
                    print("\n‚ùå Mauvaise r√©ponse. (-10 points)")
                    player.addPoints(-10)
                }
            } else {
                // Aucune r√©ponse donn√©e
                print("\n‚ö†Ô∏è Aucune r√©ponse. Vous perdez 10 points.")
                player.addPoints(-10)
            }
            
        }
    }
}


         //print("\n‚è≥ Temps restant : \(timer.formatTime(timer.getTimeRemaining()))")

        
        print("\n\n####################################################################\n")

        print("\nüìú Que voulez-vous faire ? (go, look, take, inventory,showmap, use, talk, help, quit)\n")
        // Si l'entr√©e est vide, on recommence √† la prochaine it√©ration de la boucle
        guard let input = readLine()?.trimmingCharacters(in: .whitespacesAndNewlines).lowercased(), !input.isEmpty else {
            continue
        }

        let parts = input.split(separator: " ", maxSplits: 1).map { String($0) }
        let command = parts[0]
        let argument = parts.count > 1 ? parts[1] : ""

        

// Traitement des commandes utilisateur
switch command {

case "showmap":
    // Affiche la carte du jeu avec la position actuelle du joueur
    showMap(player: player, map: map)

case "go":
    // V√©rifie si la direction sp√©cifi√©e est valide, puis d√©place le joueur
    if ["nord", "sud", "est", "ouest"].contains(argument) {
        handleGoCommand(argument, currentRoom: &currentRoom, rooms: rooms, inventory: inventory, puzzlesById: puzzlesById, player: &player, map: map)
    } else {
        print("Direction invalide.")
    }

case "look":
    // Affiche les d√©tails de la salle actuelle
    handleLookCommand(currentRoom: currentRoom)

case "take":
    // Permet au joueur de ramasser un objet dans la salle
    handleTakeCommand(argument, currentRoom: &currentRoom, inventory: &inventory, player: &player)

case "inventory":
    // Affiche l'inventaire du joueur
    handleInventoryCommand(inventory: inventory)

case "talk":
    // Permet de parler √† un personnage dans la salle
    handleTalkCommand(argument, currentRoom: currentRoom)

case "use":
    // Tente d‚Äôutiliser un objet (ici, la "cl√©") dans la salle actuelle
    handleUseCommand("cl√©", currentRoom: &currentRoom, inventory: inventory, player: &player)

case "help":
    // Affiche l'aide avec la liste des commandes disponibles
    printHelp()

case "quit", "exit", "quitter":
    // Quitte le jeu proprement
    print("\nüëã Merci d‚Äôavoir jou√©. √Ä bient√¥t !")
    return

default:
    // G√®re les commandes non reconnues
    print("Commande inconnue. Tapez 'help' pour voir les commandes disponibles.")
}}
 

// Arr√™te le timer √† la fin du jeu
timer.stop()

}
func movePlayerToNewRoom(_ direction: String, player: inout Player, map: [[String]], currentRoom: inout Room, rooms: [String: Room]) {
    // Mise √† jour de la position du joueur selon la direction
    switch direction {
    case "nord":
        if player.yPosition > 0 {
            player.yPosition -= 1
        }
    case "sud":
        if player.yPosition < map.count - 1 {
            player.yPosition += 1
        }
    case "est":
        if player.xPosition < map[0].count - 1 {
            player.xPosition += 1
        }
    case "ouest":
        if player.xPosition > 0 {
            player.xPosition -= 1
        }
    default:
        print("Direction inconnue.")
    }

    // Mettez √† jour la salle actuelle
    if let nextRoomName = currentRoom.exits[direction], let nextRoom = rooms[nextRoomName] {
        currentRoom = nextRoom
        print("nüö∂‚Äç‚ôÇÔ∏è Tu es maintenant dans la salle : \(currentRoom.name)")
    } else {
        print("üö™ Pas de sortie dans cette direction.")
    }

    // Affichage de la nouvelle carte
    showMap(player: player, map: map)
}

//afficher la carte du monde du jeu 
func showMap(player: Player, map: [[String]]) {
    print("\nüó∫Ô∏è Carte du monde du jeu :\n")

    for y in 0..<map.count {
        for x in 0..<map[y].count {
            let roomName = map[y][x]

            // Si on est sur la position du joueur
            if x == player.xPosition && y == player.yPosition {
                print("[üö∂‚Äç‚ôÇÔ∏è]", terminator: "")
            } else if roomName != "" {
                // Extraire un num√©ro depuis le nom (ex: "Salle1" ‚Üí "S1")
                let shortName: String
                let number = roomName.components(separatedBy: CharacterSet.decimalDigits.inverted).joined()
                if !number.isEmpty {
                     shortName = "S\(number)"
                } else {
                      shortName = String(roomName.prefix(2)) // fallback
}

                print("[\(shortName.padding(toLength: 2, withPad: " ", startingAt: 0))]", terminator: "")
            } else {
                print("[  ]", terminator: "")
            }
        }
        print("")
    }

    // Affichage de la salle actuelle
    print("\nüß≠ Vous √™tes dans \(player.currentRoom.name).")
    print("üìç Description : \(player.currentRoom.description)")
}




// Fonction pour g√©rer le d√©placement du joueur vers une nouvelle salle
func handleGoCommand(
    _ direction: String,
    currentRoom: inout Room,
    rooms: [String: Room],
    inventory: [Item],
    puzzlesById: [String: Puzzle],
    player: inout Player,
    map: [[String]]
) {
    // V√©rifie si une sortie existe dans la direction donn√©e
    guard let nextRoomName = currentRoom.exits[direction] else {
        print("üö™ Pas de sortie dans cette direction.")
        return
    }

    // V√©rifie si une cl√© est n√©cessaire pour acc√©der au nord depuis Salle1
    if direction == "nord", currentRoom.name == "Salle1", !player.keyUsed {
        print("‚ùå Tu ne peux pas acc√©der √† cette salle sans r√©soudre l'√©nigme et utiliser la cl√©.")
        return
    }

    // V√©rifie que la salle de destination existe
    guard let nextRoom = rooms[nextRoomName] else {
        print("‚ùå Salle introuvable.")
        return
    }

    // V√©rifie les conditions d'entr√©e sp√©cifiques √† certaines salles (ex : score requis)
    if nextRoom.name == "Salle3", player.score < 20 {
        print("üîí Vous devez avoir au moins 20 points pour entrer dans cette salle. (Actuel : \(player.score))")
        return
    }

    // V√©rifie si l'entr√©e √† la salle est bloqu√©e par une √©nigme non r√©solue
    let playerItemNames = inventory.map { $0.name.lowercased() }
    if !nextRoom.canEnter(withPlayerItems: playerItemNames, puzzlesById: puzzlesById) {
        if let puzzleId = nextRoom.entryPuzzleId,
           let puzzle = puzzlesById[puzzleId],
           !puzzle.solved {

            // Pose l'√©nigme au joueur
            puzzle.askQuestion()
            print("Votre r√©ponse : ", terminator: "")
            if let userAnswer = readLine(), puzzle.checkAnswer(userAnswer) {
                print("‚úÖ Enigme r√©solue ! Vous pouvez entrer.")
            } else {
                player.addPoints(-10)  // P√©nalit√© en cas de mauvaise r√©ponse
                print("‚ùå Mauvaise r√©ponse. L‚Äô√©nigme bloque l‚Äôentr√©e.")
                return
            }
        } else {
            return
        }
    }

    // Met √† jour la salle actuelle du joueur
    currentRoom = nextRoom
    player.currentRoom = nextRoom
    updatePlayerPosition(for: &player, to: currentRoom, in: map)

    // Si la salle est visit√©e pour la premi√®re fois, accorde 10 points
    if !player.visitedRooms.contains(nextRoom.name) {
        player.visitedRooms.insert(nextRoom.name)
        player.addPoints(10)
        print("\nüéâ Nouvelle salle d√©couverte ! Vous gagnez 10 points.\n")
    }

    // D√©bloque l'objet sp√©cial si le joueur entre dans Salle8
    if nextRoom.name == "Salle8" {
        if let salle1 = rooms["Salle1"] {
            if let index = salle1.items.firstIndex(where: { $0.name.lowercased() == "miroir magique" }) {
                salle1.items[index].isTakable = true
                print("‚ú® Le miroir magique dans la Salle1 devient maintenant r√©cup√©rable.")
            }
             
        }
    }

    print("\nüö∂‚Äç‚ôÇÔ∏è Tu es maintenant dans la salle : \(currentRoom.name)")
}


// Met √† jour les coordonn√©es du joueur sur la carte en fonction de la salle
func updatePlayerPosition(for player: inout Player, to room: Room, in map: [[String]]) {
    for (y, row) in map.enumerated() {
        for (x, roomName) in row.enumerated() {
            if roomName == room.name {
                player.xPosition = x
                player.yPosition = y
                return
            }
        }
    }
}

//Fonction qui permet de visualiser la salle et tout ce qui a √† l'interieur 
func handleLookCommand(currentRoom: Room) {
    print("\n\nüß≠ Vous √™tes dans \(currentRoom.name)")
    print("\nüìç Description : \(currentRoom.description)")
    
    if !currentRoom.items.isEmpty {
        print("\nüéí Objets pr√©sents :")
        for item in currentRoom.items {
            print("- \(item.name) (Prenable : \(item.isTakable ? "oui" : "non"))")
        }
    }

    if !currentRoom.characters.isEmpty {
        print("\nüßë Personnages pr√©sents :")
        for character in currentRoom.characters {
            print("- \(character.name): \(character.description)")
        }
    }

    let exits = currentRoom.exits.keys.joined(separator: ", ")
    print("\nüö™ Sorties disponibles : \(exits)")
}


func normalizeString(_ string: String) -> String {
    return string.applyingTransform(.toLatin, reverse: false)?
        .folding(options: .diacriticInsensitive, locale: .current) ?? string
}

func handleTakeCommand(_ itemName: String, currentRoom: inout Room, inventory: inout [Item], player: inout Player) {
    // Nettoyage de l'entr√©e, suppression des espaces et mise en minuscule
    let itemNameCleaned = itemName.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()
    
    // Normalisation de l'entr√©e en supprimant les accents
    let normalizedItemName = itemNameCleaned.folding(options: .diacriticInsensitive, locale: .current)
    
    // Recherche de l'objet en normalisant les noms des objets √©galement
    if let index = currentRoom.items.firstIndex(where: { $0.name.lowercased().folding(options: .diacriticInsensitive, locale: .current) == normalizedItemName }) {
        let item = currentRoom.items[index]
        
        if item.isTakable {
            inventory.append(item)
            currentRoom.items.remove(at: index)
            player.addPoints(5)
            print("‚úÖ Vous avez pris : \(item.name)")
        } else {
            print("‚ùå Cet objet ne peut pas √™tre pris.")
        }
    } else {
        print("‚ùå Objet non trouv√©.")
    }
}

//fonction qui affiche l'inventaire
func handleInventoryCommand(inventory: [Item]) {
    print("üéí Inventaire :")
    if inventory.isEmpty {
        print("- (vide)")
    } else {
        for item in inventory {
            print("- \(item.name)")
        }
    }
}

//fonction qui permet de discuter avec les personnages
func handleTalkCommand(_ characterName: String, currentRoom: Room) {
    if characterName.isEmpty {
        print("üó£Ô∏è Avec qui veux-tu parler ?")
        return
    }
    if let character = currentRoom.characters.first(where: {
        $0.name.compare(characterName, options: [.caseInsensitive, .diacriticInsensitive]) == .orderedSame
    }) {
        if !character.dialogue.isEmpty {
            print("üí¨ \(character.name) :")
            for line in character.dialogue {
                print(line)
            }
        } else {
            print("ü§ê \(character.name) n‚Äôa rien √† dire.")
        }
    } else {
        print("‚ùå Personnage introuvable.")
    }
}

//fonction qui permet d'utiliser les objets
func handleUseCommand(_ itemName: String, currentRoom: inout Room, inventory: [Item], player: inout Player) {
    let lowerItem = itemName.lowercased()

    // V√©rifie si l'objet est bien dans l'inventaire
    if lowerItem == "cl√©", inventory.contains(where: { $0.name.lowercased() == "cl√©" }) {
        switch currentRoom.name {
        case "Salle1":
            print("üîì Vous utilisez la cl√©. Une porte s‚Äôouvre au nord !")
            currentRoom.exits["nord"] = "Salle2"
            player.keyUsed = true
        
        case "Salle8":
            // R√©solution du puzzle si n√©cessaire
            if let puzzle = currentRoom.puzzles.first(where: { !$0.solved }) {
                print("‚ö° R√©solvez l'√©nigme pour ouvrir la porte :")
                puzzle.askQuestion() // Affiche la question de l'√©nigme
                if let playerAnswer = readLine() {
                    if puzzle.checkAnswer(playerAnswer) {
                        print("‚úÖ L'√©nigme est r√©solue ! Vous pouvez maintenant utiliser la cl√©.")
                        puzzle.solved = true  // Marque le puzzle comme r√©solu
                    } else {
                        print("‚ùå Mauvaise r√©ponse, essayez encore.")
                    }
                }
            } else {
                print("üîì Vous utilisez la cl√©. Une porte s'ouvre au nord vers la sortie !")
                currentRoom.exits["nord"] = "Salle9"
                player.keyUsed = true
            }
        
        default:
            print("‚ùå Vous ne pouvez pas utiliser cela ici.")
        }
    } else {
        print("‚ùå Vous n‚Äôavez pas cet objet dans votre inventaire.")
    }
}



//afficher l'aide
func printHelp() {
    print("""
    üìò Commandes disponibles :
    - go <direction> : Aller dans une direction (ex: go nord)
    - look : Observer la salle actuelle
    - take <objet> : Prendre un objet
    - inventory : Voir votre inventaire
    - showmap : Voir votre position dans le monde du jeu 
    - use <objet> : Utiliser un objet
    - talk <personnage> : Parler √† un personnage
    - help : Afficher cette aide
    - quit : Quitter le jeu
    """)
}

func clearConsole() {
    print("\u{001B}[2J")
    print("\u{001B}[0;0H")
}


// MARK: - Programme principal
// Si les donn√©es du jeu sont correctement charg√©es...
if let (roomList, puzzlesById) = loadGameData() {

    // Cr√©e un dictionnaire des salles avec leur nom comme cl√©
    let roomDict = Dictionary(uniqueKeysWithValues: roomList.map { ($0.name, $0) })

    // D√©marre le jeu depuis la salle "Salle1"
    startGame(rooms: roomDict, startingRoomName: "Salle1", puzzlesById: puzzlesById)

} else {
    // Affiche une erreur si le chargement a √©chou√©
    print("√âchec du chargement des donn√©es du jeu.")
}


